\section{3. Analysis of DBMS design}

Instead of going through every table in the SQL-Schema we have decided to discuss the areas that we believe could seem to interfere with the 'Boyce Codd' normal form.\\ 

\subsection{Genre}
The relationship between the tables GenreType and Production is done with the Genre relationship, which contains references to the aforementioned tables' primary keys, as foreign key constraints. This could seem redundant as a lot of GenreTypes will reoccur in the Genre table but the alternative, which is not having the "Genre" relationship, would force us to repeat genre names multiple times as well as not allowing us to look up the genre types that can be associated with a production. Having the relationship adds this possibility and replaces the duplication of genre names with id values.\\

\subsection{Production}
It is possible that multiple attributes such as the 'country' attribute in the relation "Production" should be treated as we treated GenreType, but since it would involve the creation of several additional tables, which would exceed the constraints of the assignment(maximum 15 tables) we have decided to showcase GenreType as an example of optimizing the schema.\\

\subsection{Inheritance}
The combination of the relations; Production, Movie, Series (hereunder Season and Episode), contributes to avoid a major amount of redundancy, as the alternative of storing loads of information in each table would introduce. This is solved by containing all common data fields in the Production relation, and having the previously mentioned Movie and Series tables relate to a single entry in the Production relation. Following this, Season and Episode contain little to no additional information, albeit a single Episode will usually have an individual name, setting it apart from the other episodes produced within the series.

